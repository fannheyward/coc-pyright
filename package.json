{
  "name": "coc-pyright",
  "version": "1.1.22",
  "description": "Pyright extension for coc.nvim",
  "author": "Heyward Fann <fannheyward@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "python",
    "pyright"
  ],
  "engines": {
    "coc": "^0.0.70"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fannheyward/coc-pyright.git"
  },
  "activationEvents": [
    "onLanguage:python",
    "workspaceContains:**/pyrightconfig.json"
  ],
  "scripts": {
    "server": "./build_server.sh",
    "clean": "rimraf lib",
    "watch": "webpack --watch",
    "build": "webpack",
    "prepare": "npm-run-all clean build"
  },
  "devDependencies": {
    "@types/node": "^13.1.2",
    "coc.nvim": "^0.0.75",
    "npm-run-all": "^4.1.5",
    "rimraf": "^3.0.0",
    "ts-loader": "^6.0.4",
    "typescript": "^3.5.3",
    "webpack": "^4.41.4",
    "webpack-cli": "^3.3.10"
  },
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": "pyrightconfig.json",
        "url": "./schemas/pyrightconfig.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-pyright configuration",
      "properties": {
        "python.analysis.typeshedPaths": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Paths to look for typeshed modules.",
          "scope": "resource"
        },
        "python.pythonPath": {
          "type": "string",
          "default": "python",
          "description": "Path to Python, you can use a custom version of Python.",
          "scope": "resource"
        },
        "python.venvPath": {
          "type": "string",
          "default": "",
          "description": "Path to folder with a list of Virtual Environments.",
          "scope": "resource"
        },
        "pyright.disableLanguageServices": {
          "type": "boolean",
          "default": false,
          "description": "Disables type completion, definitions, and references.",
          "scope": "resource"
        },
        "pyright.openFilesOnly": {
          "type": "boolean",
          "default": false,
          "description": "Report errors only for currently-open files.",
          "scope": "resource"
        },
        "pyright.useLibraryCodeForTypes": {
          "type": "boolean",
          "default": false,
          "description": "Use library implementations to extract type information.",
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "pyright.organizeimports",
        "title": "Organize Imports",
        "category": "Pyright"
      },
      {
        "command": "pyright.createtypestub",
        "title": "Creates Type Stubs with given module name",
        "category": "Pyright"
      }
    ]
  }
}
