{
  "name": "coc-pyright",
  "version": "1.1.96",
  "description": "Pyright extension for coc.nvim",
  "author": "Heyward Fann <fannheyward@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "python",
    "pyright"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fannheyward/coc-pyright.git"
  },
  "activationEvents": [
    "onLanguage:python",
    "workspaceContains:pyrightconfig.json",
    "workspaceContains:mspythonconfig.json"
  ],
  "rootPatterns": [
    {
      "filetype": "python",
      "patterns": [
        "pyrightconfig.json",
        "mspythonconfig.json"
      ]
    }
  ],
  "scripts": {
    "schema": "curl -o schemas/pyrightconfig.schema.json https://raw.githubusercontent.com/microsoft/pyright/master/packages/vscode-pyright/schemas/pyrightconfig.schema.json && node diff.js",
    "clean": "rimraf lib",
    "lint": "eslint src --ext ts",
    "watch": "webpack --watch",
    "build": "webpack",
    "prepare": "npm-run-all clean build"
  },
  "devDependencies": {
    "@types/diff-match-patch": "^1.0.32",
    "@types/fs-extra": "^9.0.2",
    "@types/md5": "^2.2.0",
    "@types/minimatch": "^3.0.3",
    "@types/node": "^14.11.8",
    "@types/semver": "^7.3.4",
    "@types/which": "^2.0.0",
    "@typescript-eslint/eslint-plugin": "^4.5.0",
    "@typescript-eslint/parser": "^4.5.0",
    "coc.nvim": "^0.0.80",
    "diff-match-patch": "^1.0.5",
    "eslint": "^7.11.0",
    "eslint-config-prettier": "^7.0.0",
    "eslint-plugin-prettier": "^3.1.4",
    "fs-extra": "^9.0.1",
    "iconv-lite": "^0.6.2",
    "md5": "^2.3.0",
    "named-js-regexp": "^1.3.5",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.1.2",
    "rimraf": "^3.0.0",
    "semver": "^7.3.2",
    "tree-kill": "^1.2.2",
    "ts-loader": "^8.0.5",
    "typescript": "^4.0.2",
    "untildify": "^4.0.0",
    "webpack": "^5.1.3",
    "webpack-cli": "^4.0.0",
    "which": "^2.0.2"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 180,
    "semi": true
  },
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": "pyrightconfig.json",
        "url": "./schemas/pyrightconfig.schema.json"
      },
      {
        "fileMatch": "mspythonconfig.json",
        "url": "./schemas/pyrightconfig.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-pyright configuration",
      "properties": {
        "python.analysis.extraPaths": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Additional import search resolution paths",
          "scope": "resource"
        },
        "python.analysis.typeshedPaths": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Paths to look for typeshed modules.",
          "scope": "resource"
        },
        "python.analysis.autoImportCompletions": {
          "type": "boolean",
          "default": true,
          "description": "Offer auto-import completions.",
          "scope": "resource"
        },
        "python.analysis.autoSearchPaths": {
          "type": "boolean",
          "default": true,
          "description": "Automatically add common search paths like 'src'?",
          "scope": "resource"
        },
        "python.analysis.stubPath": {
          "type": "string",
          "default": "typings",
          "description": "Path to directory containing custom type stub files.",
          "scope": "resource"
        },
        "python.analysis.diagnosticMode": {
          "type": "string",
          "default": "openFilesOnly",
          "enum": [
            "openFilesOnly",
            "workspace"
          ],
          "enumDescriptions": [
            "Analyzes and reports errors on only open files.",
            "Analyzes and reports errors on all files in the workspace."
          ],
          "scope": "resource"
        },
        "python.analysis.diagnosticSeverityOverrides": {
          "type": "object",
          "default": {},
          "description": "Allows a user to override the severity levels for individual diagnostics.",
          "properties": {
            "reportGeneralTypeIssues": {
              "type": "string",
              "description": "Diagnostics for general type inconsistencies, unsupported operations, argument/parameter mismatches, etc. Covers all of the basic type-checking rules not covered by other rules. Does not include syntax errors.",
              "default": "error",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportPropertyTypeMismatch": {
              "type": "string",
              "description": "Diagnostics for property whose setter and getter have mismatched types.",
              "default": "error",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportFunctionMemberAccess": {
              "type": "string",
              "description": "Diagnostics for member accesses on functions.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportMissingImports": {
              "type": "string",
              "description": "Diagnostics for imports that have no corresponding imported python file or type stub file.",
              "default": "error",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportMissingModuleSource": {
              "type": "string",
              "description": "Diagnostics for imports that have no corresponding source file. This happens when a type stub is found, but the module source file was not found, indicating that the code may fail at runtime when using this execution environment. Type checking will be done using the type stub.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportMissingTypeStubs": {
              "type": "string",
              "description": "Diagnostics for imports that have no corresponding type stub file (either a typeshed file or a custom type stub). The type checker requires type stubs to do its best job at analysis.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportImportCycles": {
              "type": "string",
              "description": "Diagnostics for cyclical import chains. These are not errors in Python, but they do slow down type analysis and often hint at architectural layering issues. Generally, they should be avoided.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnusedImport": {
              "type": "string",
              "description": "Diagnostics for an imported symbol that is not referenced within that file.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnusedClass": {
              "type": "string",
              "description": "Diagnostics for a class with a private name (starting with an underscore) that is not accessed.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnusedFunction": {
              "type": "string",
              "description": "Diagnostics for a function or method with a private name (starting with an underscore) that is not accessed.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnusedVariable": {
              "type": "string",
              "description": "Diagnostics for a variable that is not accessed.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportDuplicateImport": {
              "type": "string",
              "description": "Diagnostics for an imported symbol or module that is imported more than once.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportWildcardImportFromLibrary": {
              "type": "string",
              "description": "Diagnostics for an wildcard import from an external library.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportOptionalSubscript": {
              "type": "string",
              "description": "Diagnostics for an attempt to subscript (index) a variable with an Optional type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportOptionalMemberAccess": {
              "type": "string",
              "description": "Diagnostics for an attempt to access a member of a variable with an Optional type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportOptionalCall": {
              "type": "string",
              "description": "Diagnostics for an attempt to call a variable with an Optional type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportOptionalIterable": {
              "type": "string",
              "description": "Diagnostics for an attempt to use an Optional type as an iterable value (e.g. within a for statement).",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportOptionalContextManager": {
              "type": "string",
              "description": "Diagnostics for an attempt to use an Optional type as a context manager (as a parameter to a with statement).",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportOptionalOperand": {
              "type": "string",
              "description": "Diagnostics for an attempt to use an Optional type as an operand to a binary or unary operator (like '+', '==', 'or', 'not').",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUntypedFunctionDecorator": {
              "type": "string",
              "description": "Diagnostics for function decorators that have no type annotations. These obscure the function type, defeating many type analysis features.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUntypedClassDecorator": {
              "type": "string",
              "description": "Diagnostics for class decorators that have no type annotations. These obscure the class type, defeating many type analysis features.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUntypedBaseClass": {
              "type": "string",
              "description": "Diagnostics for base classes whose type cannot be determined statically. These obscure the class type, defeating many type analysis features.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUntypedNamedTuple": {
              "type": "string",
              "description": "Diagnostics when “namedtuple” is used rather than “NamedTuple”. The former contains no type information, whereas the latter does.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportPrivateUsage": {
              "type": "string",
              "description": "Diagnostics for incorrect usage of private or protected variables or functions. Protected class members begin with a single underscore _ and can be accessed only by subclasses. Private class members begin with a double underscore but do not end in a double underscore and can be accessed only within the declaring class. Variables and functions declared outside of a class are considered private if their names start with either a single or double underscore, and they cannot be accessed outside of the declaring module.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportConstantRedefinition": {
              "type": "string",
              "description": "Diagnostics for attempts to redefine variables whose names are all-caps with underscores and numerals.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportIncompatibleMethodOverride": {
              "type": "string",
              "description": "Diagnostics for methods that override a method of the same name in a base class in an incompatible manner (wrong number of parameters, incompatible parameter types, or incompatible return type).",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportIncompatibleVariableOverride": {
              "type": "string",
              "description": "Diagnostics for overrides in subclasses that redefine a variable in an incompatible way.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportInvalidStringEscapeSequence": {
              "type": "string",
              "description": "Diagnostics for invalid escape sequences used within string literals. The Python specification indicates that such sequences will generate a syntax error in future versions.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnknownParameterType": {
              "type": "string",
              "description": "Diagnostics for input or return parameters for functions or methods that have an unknown type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnknownArgumentType": {
              "type": "string",
              "description": "Diagnostics for call arguments for functions or methods that have an unknown type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnknownLambdaType": {
              "type": "string",
              "description": "Diagnostics for input or return parameters for lambdas that have an unknown type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnknownVariableType": {
              "type": "string",
              "description": "Diagnostics for variables that have an unknown type..",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnknownMemberType": {
              "type": "string",
              "description": "Diagnostics for class or instance variables that have an unknown type.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportMissingTypeArgument": {
              "type": "string",
              "description": "Diagnostics for generic class reference with missing type arguments.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportInvalidTypeVarUse": {
              "type": "string",
              "description": "Diagnostics for improper use of type variables in a function signature.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportCallInDefaultInitializer": {
              "type": "string",
              "description": "Diagnostics for function calls within a default value initialization expression. Such calls can mask expensive operations that are performed at module initialization time.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnnecessaryIsInstance": {
              "type": "string",
              "description": "Diagnostics for 'isinstance' or 'issubclass' calls where the result is statically determined to be always true or always false. Such calls are often indicative of a programming error.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnnecessaryCast": {
              "type": "string",
              "description": "Diagnostics for 'cast' calls that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportAssertAlwaysTrue": {
              "type": "string",
              "description": "Diagnostics for 'assert' statement that will provably always assert. This can be indicative of a programming error.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportSelfClsParameterName": {
              "type": "string",
              "description": "Diagnostics for a missing or misnamed “self” parameter in instance methods and “cls” parameter in class methods. Instance methods in metaclasses (classes that derive from “type”) are allowed to use “cls” for instance methods.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportImplicitStringConcatenation": {
              "type": "string",
              "description": "Diagnostics for two or more string literals that follow each other, indicating an implicit concatenation. This is considered a bad practice and often masks bugs such as missing commas.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportInvalidStubStatement": {
              "type": "string",
              "description": "Diagnostics for type stub statements that do not conform to PEP 484",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUndefinedVariable": {
              "type": "string",
              "description": "Diagnostics for a missing or misnamed “self” parameter in instance methods and “cls” parameter in class methods. Instance methods in metaclasses (classes that derive from “type”) are allowed to use “cls” for instance methods.",
              "default": "error",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnboundVariable": {
              "type": "string",
              "description": "Diagnostics for unbound and possibly unbound variables.",
              "default": "error",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnusedCallResult": {
              "type": "string",
              "description": "Diagnostics for call expressions whose results are not consumed and are not None.",
              "default": "none",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            },
            "reportUnsupportedDunderAll": {
              "type": "string",
              "description": "Diagnostics for unsupported operations performed on __all__.",
              "default": "warning",
              "enum": [
                "none",
                "information",
                "warning",
                "error"
              ]
            }
          },
          "scope": "resource"
        },
        "python.analysis.logLevel": {
          "type": "string",
          "default": "Information",
          "description": "Specifies the level of logging for the Output panel",
          "enum": [
            "Error",
            "Warning",
            "Information",
            "Trace"
          ]
        },
        "python.analysis.typeCheckingMode": {
          "type": "string",
          "default": "basic",
          "enum": [
            "off",
            "basic",
            "strict"
          ],
          "description": "Defines the default rule set for type checking.",
          "scope": "resource"
        },
        "python.analysis.useLibraryCodeForTypes": {
          "type": "boolean",
          "default": true,
          "description": "Use library implementations to extract type information when type stub is not present.",
          "scope": "resource"
        },
        "python.linting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether to lint Python files.",
          "scope": "resource"
        },
        "python.linting.flake8Args": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.flake8CategorySeverity.E": {
          "type": "string",
          "default": "Error",
          "description": "Severity of Flake8 message type 'E'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.flake8CategorySeverity.F": {
          "type": "string",
          "default": "Error",
          "description": "Severity of Flake8 message type 'F'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.flake8CategorySeverity.W": {
          "type": "string",
          "default": "Warning",
          "description": "Severity of Flake8 message type 'W'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.flake8Enabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using flake8",
          "scope": "resource"
        },
        "python.linting.flake8Path": {
          "type": "string",
          "default": "flake8",
          "description": "Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.ignorePatterns": {
          "type": "array",
          "description": "Patterns used to exclude files or folders from being linted.",
          "default": [
            ".vscode/*.py",
            "**/site-packages/**/*.py"
          ],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.lintOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Whether to lint Python files when saved.",
          "scope": "resource"
        },
        "python.linting.maxNumberOfProblems": {
          "type": "number",
          "default": 100,
          "description": "Controls the maximum number of problems produced by the server.",
          "scope": "resource"
        },
        "python.linting.banditArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.banditEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using bandit.",
          "scope": "resource"
        },
        "python.linting.banditPath": {
          "type": "string",
          "default": "bandit",
          "description": "Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.mypyArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [
            "--ignore-missing-imports",
            "--follow-imports=silent",
            "--show-column-numbers"
          ],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.mypyCategorySeverity.error": {
          "type": "string",
          "default": "Error",
          "description": "Severity of Mypy message type 'Error'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.mypyCategorySeverity.note": {
          "type": "string",
          "default": "Information",
          "description": "Severity of Mypy message type 'Note'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.mypyEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using mypy.",
          "scope": "resource"
        },
        "python.linting.mypyPath": {
          "type": "string",
          "default": "mypy",
          "description": "Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.pytypeEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using pytype.",
          "scope": "resource"
        },
        "python.linting.pytypePath": {
          "type": "string",
          "default": "pytype",
          "description": "Path to pytype, you can use a custom version of mypy by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.pytypeArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.pep8Args": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.pep8CategorySeverity.E": {
          "type": "string",
          "default": "Error",
          "description": "Severity of Pep8 message type 'E'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pep8CategorySeverity.W": {
          "type": "string",
          "default": "Warning",
          "description": "Severity of Pep8 message type 'W'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pep8Enabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using pep8",
          "scope": "resource"
        },
        "python.linting.pep8Path": {
          "type": "string",
          "default": "pep8",
          "description": "Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.prospectorArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.prospectorEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using prospector.",
          "scope": "resource"
        },
        "python.linting.prospectorPath": {
          "type": "string",
          "default": "prospector",
          "description": "Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.pydocstyleArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.pydocstyleEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using pydocstyle",
          "scope": "resource"
        },
        "python.linting.pydocstylePath": {
          "type": "string",
          "default": "pydocstyle",
          "description": "Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.pylamaArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.pylamaEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using pylama.",
          "scope": "resource"
        },
        "python.linting.pylamaPath": {
          "type": "string",
          "default": "pylama",
          "description": "Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.pylintArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.linting.pylintCategorySeverity.convention": {
          "type": "string",
          "default": "Information",
          "description": "Severity of Pylint message type 'Convention/C'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pylintCategorySeverity.error": {
          "type": "string",
          "default": "Error",
          "description": "Severity of Pylint message type 'Error/E'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pylintCategorySeverity.fatal": {
          "type": "string",
          "default": "Error",
          "description": "Severity of Pylint message type 'Fatal/F'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pylintCategorySeverity.refactor": {
          "type": "string",
          "default": "Hint",
          "description": "Severity of Pylint message type 'Refactor/R'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pylintCategorySeverity.warning": {
          "type": "string",
          "default": "Warning",
          "description": "Severity of Pylint message type 'Warning/W'.",
          "enum": [
            "Hint",
            "Error",
            "Information",
            "Warning"
          ],
          "scope": "resource"
        },
        "python.linting.pylintEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to lint Python files using pylint.",
          "scope": "resource"
        },
        "python.linting.pylintPath": {
          "type": "string",
          "default": "pylint",
          "description": "Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.linting.pylintUseMinimalCheckers": {
          "type": "boolean",
          "default": true,
          "description": "Whether to run Pylint with minimal set of rules.",
          "scope": "resource"
        },
        "python.pythonPath": {
          "type": "string",
          "default": "python",
          "description": "Path to Python, you can use a custom version of Python.",
          "scope": "resource"
        },
        "python.venvPath": {
          "type": "string",
          "default": "",
          "description": "Path to folder with a list of Virtual Environments.",
          "scope": "resource"
        },
        "python.formatting.blackArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.formatting.blackPath": {
          "type": "string",
          "default": "black",
          "description": "Path to Black, you can use a custom version of Black by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.formatting.darkerArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.formatting.darkerPath": {
          "type": "string",
          "default": "darker",
          "description": "Path to darker, you can use a custom version of darker by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.formatting.yapfArgs": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.formatting.yapfPath": {
          "type": "string",
          "default": "yapf",
          "description": "Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.formatting.autopep8Args": {
          "type": "array",
          "description": "Arguments passed in. Each argument is a separate item in the array.",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "python.formatting.autopep8Path": {
          "type": "string",
          "default": "autopep8",
          "description": "Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.",
          "scope": "resource"
        },
        "python.formatting.provider": {
          "type": "string",
          "default": "autopep8",
          "description": "Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.",
          "enum": [
            "autopep8",
            "darker",
            "black",
            "yapf",
            "none"
          ],
          "scope": "resource"
        },
        "pyright.disableCompletion": {
          "type": "boolean",
          "default": false,
          "description": "Disable completion only."
        },
        "pyright.disableLanguageServices": {
          "type": "boolean",
          "default": false,
          "description": "Disables type completion, definitions, and references.",
          "scope": "resource"
        },
        "pyright.disableOrganizeImports": {
          "type": "boolean",
          "default": false,
          "description": "Disables the `Organize Imports` command.",
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "python.runLinting",
        "title": "Run Linting",
        "category": "Pyright"
      },
      {
        "command": "pyright.organizeimports",
        "title": "Organize Imports",
        "category": "Pyright"
      },
      {
        "command": "pyright.restartserver",
        "title": "Restart Server",
        "category": "Pyright"
      },
      {
        "command": "pyright.createtypestub",
        "title": "Creates Type Stubs with given module name",
        "category": "Pyright"
      }
    ]
  },
  "dependencies": {
    "pyright": "^1.1.96"
  }
}
